name: Build and Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: 11

      - name: Build with Maven
        run: mvn clean package --file pom.xml

      - name: List files in target directory with permissions
        run: ls -la target

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: target/*.jar    

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: build-artifact/

      - name: List downloaded artifacts with permissions
        run: ls -la build-artifact/

      - name: Verify current directory
        run: pwd

      - name: Verify permissions of current directory
        run: ls -la

      - name: Deploy to CloudHub
        env:
          ANYPOINT_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID }}
          ANYPOINT_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET }}
          ANYPOINT_ENV: ${{ secrets.ANYPOINT_ENV }} # Verifique o valor no GitHub Secrets
        run: |
          # Encontrar o nome do artefato
          artifact=$(ls build-artifact/*.jar | head -n 1)
          
          # Verificar se o artefato foi encontrado
          if [ -z "$artifact" ]; then
            echo "Erro: Nenhum arquivo JAR encontrado."
            exit 1
          fi

          # Exibir o caminho do artefato
          echo "Artefato encontrado: $artifact"

          # Executar o comando de deploy com logging detalhado
          mvn mule:deploy -X -Danypoint.clientId=$ANYPOINT_CLIENT_ID -Danypoint.clientSecret=$ANYPOINT_CLIENT_SECRET -Danypoint.env=$ANYPOINT_ENV -Dartifact=$artifact