name: Build and Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
jobs:
#  build:
#    runs-on: windows-latest
#    steps:
#    - name: Checkout this repo
#      uses: actions/checkout@v3
#    - name: Cache dependencies
#      uses: actions/cache@v3
#      with:
#        path: ~/.m2/repository
#        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#        restore-keys: |
#          ${{ runner.os }}-maven-
#    - name: Set up JDK 1.8
#      uses: actions/setup-java@v3
#      with:
#        distribution: 'zulu'
#        java-version: 8
#    - name: Build with Maven
#      run: mvn -B package --file pom.xml
#    - name: Stamp artifact file name with commit hash
#      run: |
#        artifactName1=$(ls target/*.jar | head -1)
#        commitHash=$(git rev-parse --short "$GITHUB_SHA")
#        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
#        mv $artifactName1 $artifactName2
#    - name: Upload artifact 
#      uses: actions/upload-artifact@v3
#      with:
#          name: artifacts
#          path: target/*.jar

  build:
    runs-on: windows-latest
    steps:
    - name: Checkout this repo
      uses: actions/checkout@v3

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: 8

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Stamp artifact file name with commit hash
      shell: pwsh
      run: |
        $artifactName1 = Get-ChildItem -Path target -Filter *.jar | Select-Object -First 1
        if ($null -eq $artifactName1) {
            Write-Error "Nenhum arquivo JAR encontrado no diret√≥rio target"
            exit 1
        }
        $commitHash = (git rev-parse --short "$env:GITHUB_SHA")
        $artifactName2 = $artifactName1.Name -replace '.jar$', "-$commitHash.jar"
        Rename-Item -Path $artifactName1.FullName -NewName $artifactName2
        $artifactPath = Join-Path $artifactName1.DirectoryName $artifactName2

    - name: Upload artifact 
      uses: actions/upload-artifact@v3
      with:
          name: artifacts
          path: target/*.jar    
deploy:
  needs: build
  runs-on: windows-latest
  steps:    
    - name: Checkout this repo
      uses: actions/checkout@v3

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: artifacts

    - name: Deploy to Sandbox
      shell: pwsh
      env:
        USERNAME: ${{ secrets.anypoint_platform_username }}
        PASSWORD: ${{ secrets.anypoint_platform_password }}
      run: |
        # Encontrar o nome do artefato
        $artifact = Get-ChildItem -Path . -Filter *.jar | Select-Object -First 1
        
        # Verificar se o artefato foi encontrado
        if ($null -eq $artifact) {
          Write-Error "Erro: Nenhum arquivo JAR encontrado."
          exit 1
        }

        # Executar o comando de deploy
        mvn deploy -DmuleDeploy -Dmule.artifact=$artifact.FullName -Danypoint.username="$env:USERNAME" -Danypoint.password="$env:PASSWORD"


#  deploy:
#    needs: build
#    runs-on: windows-latest
#    steps:    
#    - name: Checkout this repo
#      uses: actions/checkout@v3
#    - name: Cache dependencies
#      uses: actions/cache@v3
#      with:
#        path: ~/.m2/repository
#        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#        restore-keys: |
#          ${{ runner.os }}-maven-
#    - uses: actions/download-artifact@v3
#      with:
#        name: artifacts
#    - name: Deploy to Sandbox
#      env:
#        USERNAME: ${{ secrets.anypoint_platform_username }}
#        PASSWORD: ${{ secrets.anypoint_platform_password }}
#      run: |
#        artifactName=$(ls *.jar | head -1)
#        mvn deploy -DmuleDeploy \
#         -Dmule.artifact=$artifactName \
#         -Danypoint.username="$USERNAME" \
#         -Danypoint.password="$PASSWORD" 
#         -Ddecryption.key="$DECRIPTION_KEY"

